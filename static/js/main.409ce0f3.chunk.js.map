{"version":3,"sources":["DraggableButton.js","FilterWidgetHeaderToogleButton.js","FiltersWidgetHeader.js","DropdownContent.js","Actions/ActionTypes.js","Dispatcher/Dispatcher.js","mockes.js","Events/EventTypes.js","filterHelper.js","Stores/FiltersDataStore.js","Checkbox.js","ContentElement.js","Actions/Actions.js","DropdownArrow.js","DropdownHeader.js","Dropdown.js","TablesDropdown.js","ColumnsDropdown.js","DropdownsContainer.js","SearchComponent.js","FilterElement.js","FilterElementsWrapper.js","FilterElementsContainer.js","FilterResult.js","FilterComponent.js","FiltersWidgetContentContainer.js","FiltersWidget.js","App.js","serviceWorker.js","index.js"],"names":["DraggableButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseDown","bind","assertThisInitialized","onMouseUp","onMouseMove","pageX","pageY","cursorX","cursorY","document","onmousemove","e","shiftX","shiftY","shift","_this2","react_default","a","createElement","className","Component","FilterWidgetHeaderToogleButton","classNames","isContentVisible","onClick","toogleContent","FiltersWidgetHeader","src_DraggableButton","src_FilterWidgetHeaderToogleButton","DropdownContent","children","actionTypes","setFilterResults","addTable","applyFilter","toggleRecord","toggleTable","toggleColumn","setFilterValue","toggleFilter","toggleSelect","toggleSort","toggleDropdown","Dispatcher","mockData","tableName","data","columnName","eventTypes","onColumnsChanged","onTablesChanged","onResultsChanged","onSelectToggled","onFilterChanged","onSortToggled","onDropdownToggled","onFilterValueChanged","filters","push","label","filterFunction","filterValue","record","includes","startsWith","filterHelper","FilterHelper","initializeFilters","map","f","index","filter","objectSpread","filterDataStore","FiltersDataStore","tables","columns","tablesState","allRecords","sortedRecords","filterResults","isSortOn","isTablesDropdownOpened","isColumnsDropdownOpened","getFilters","active","activeFilter","name","emit","tablesToAdd","self","Array","forEach","table","checked","col","find","t","removeRecords","isSelectOpened","updateFilterResults","column","addRecords","_this3","records","c","rec","updateSortedRecords","slice","sort","compareFunction","value","first","second","tableState","addColumns","removeColumns","element","r","action","type","EventEmitter","dispatcher","register","reduce","addTables","window","Checkbox","onChange","ContentElement","target","localName","handleBubbleEvent","src_Checkbox","text","dispatch","DropdownArrow","iconClassName","concat","toogle","DropdownHeader","toggle","src_DropdownArrow","Dropdown","state","isDropdownOpened","toggleContent","handleDropdownToggled","on","removeListener","currentState","setState","previous","current","headerData","selectedValues","reducer","DropdownHeader_DropdownHeader","TablesDropdown","getTables","selectedTables","handleTablesChanged","src_Dropdown","DropdownContent_DropdownContent","ContentElement_ContentElement","key","ColumnsDropdown","columnsState","getColumns","selectedColumns","handleColumnsChanged","DropdownsContainer","src_TablesDropdown","src_ColumnsDropdown","SearchComponent","debouncedHandleChange","debounce","cancel","maxLength","placeholder","handleChange","FilterElement","style","backgroundColor","FilterElementsWrapper","FilterElementsContainer","onSelectOpened","handleSelectToggled","handleFilterChanged","handleSortToggled","actions","src_FilterElementsWrapper","src_FilterElement","onFilterSelected","FilterResult","results","getFilterResults","onRecordClicked","handleResultsChanged","console","log","FilterComponent","src_SearchComponent","src_FilterElementsContainer","src_FilterResult","FiltersWidgetContentContainer","DropdownsContainer_DropdownsContainer","src_FilterComponent","FiltersWidget","left","top","prev","content","src_FiltersWidgetContentContainer","FiltersWidgetHeader_FiltersWidgetHeader","App","FiltersWidget_FiltersWidget","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.409ce0f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DraggableButton extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.onMouseDown = this.onMouseDown.bind(this);\r\n        this.onMouseUp = this.onMouseUp.bind(this);\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n    }\r\n\r\n    onMouseDown(pageX, pageY)\r\n    {\r\n        this.cursorX = pageX;\r\n        this.cursorY = pageY;\r\n\r\n        document.onmousemove = this.onMouseMove;\r\n    }\r\n\r\n    onMouseMove(e)\r\n    {\r\n        let shiftX = e.pageX - this.cursorX;\r\n        let shiftY = e.pageY - this.cursorY;\r\n\r\n        this.cursorX = e.pageX;\r\n        this.cursorY = e.pageY;\r\n        this.props.shift(shiftX, shiftY);\r\n    }\r\n\r\n    onMouseUp()\r\n    {\r\n        document.onmousemove = null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span className=\"fa fa-bars\" \r\n            onMouseDown={(e) => this.onMouseDown(e.pageX, e.pageY)}\r\n            onMouseUp={this.onMouseUp}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggableButton;\r\n","import React, { Component } from 'react';\r\n\r\nclass FilterWidgetHeaderToogleButton extends Component {\r\n    render() {\r\n\r\n        var classNames = \"fa open-close-thik \";\r\n\r\n        classNames += this.props.isContentVisible ? \"fa-close\" : \"fa-angle-down\";\r\n\r\n        return (\r\n            <span className={classNames} onClick={this.props.toogleContent}></span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterWidgetHeaderToogleButton;\r\n","import React, { Component } from 'react'\r\nimport DraggableButton from './DraggableButton'\r\nimport FilterWidgetHeaderToogleButton from './FilterWidgetHeaderToogleButton';\r\n\r\nexport default class FiltersWidgetHeader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"filtersWidgetHeader\">\r\n                <DraggableButton shift={this.props.shift}/>\r\n                <span className=\"header-label\">FILTERS</span>\r\n                <FilterWidgetHeaderToogleButton isContentVisible = {this.props.isContentVisible} toogleContent = {this.props.toogleContent}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class DropdownContent extends Component \r\n{\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"dropdown-content-container\">\r\n                <ul className = \"dropdown-content scrollable\"> \r\n                    {this.props.children}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","const actionTypes = \r\n{\r\n    setFilterResults: \"SET_FILTER_RESULTS\",\r\n    addTable: \"ADD_TABLE\",\r\n    applyFilter: \"APPLY_FILTER\",\r\n    toggleRecord: \"TOGGLE_RECORD\",\r\n    toggleTable: \"TOGGLE_TABLE\",\r\n    toggleColumn: \"TOGGLE_COLUMN\",\r\n    setFilterValue: \"SET_FILTER_VALUE\",\r\n    toggleFilter: \"TOGGLE_FILTER\",\r\n    toggleSelect: \"TOGGLE_SELECT\",\r\n    toggleSort: \"TOGGLE_SORT\",\r\n    toggleDropdown: \"TOGGLE_DROPDOWN\"\r\n}\r\n\r\nexport default actionTypes;","import {Dispatcher} from 'flux'\r\n\r\nexport default new Dispatcher();","const mockData = [\r\n\r\n    {\r\n        tableName: \"Test 1\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 1 My column\",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    },\r\n\r\n    {\r\n        tableName: \"Test 2\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 2 column 1\",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            },\r\n            {\r\n                columnName : \"Test 2 column 2\",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    },\r\n\r\n    {\r\n        tableName: \"Test 3\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 3 column 1 \",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            },\r\n            {\r\n                columnName : \"Test 3 column 2 \",\r\n                data: [\"ASda232sd\", \"saasdasd111\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    },\r\n\r\n    {\r\n        tableName: \"Test 4\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 4 column 1 \",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            },\r\n            {\r\n                columnName : \"Test 4 column 2 \",\r\n                data: [\"ASda232sd\", \"saasdasd111\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        tableName: \"Test 5\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 5 column 1 \",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            },\r\n            {\r\n                columnName : \"Test 5 column 2 \",\r\n                data: [\"ASda232sd\", \"saasdasd111\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        tableName: \"Test 6\",\r\n        data: [\r\n            {\r\n                columnName : \"Test 6 column 1 \",\r\n                data: [\"ASdasd\", \"saasdasd\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            },\r\n            {\r\n                columnName : \"Test 6 column 2 \",\r\n                data: [\"ASda232sd\", \"saasdasd111\", \"213213\", \"sadasdasd\", \"asdasdasd\"]\r\n            }\r\n        ]\r\n    }\r\n\r\n]\r\n\r\nexport default mockData;","const eventTypes = {\r\n    onColumnsChanged: \"onColumnsChanged\",\r\n    onTablesChanged: \"onTablesChanged\",\r\n    onResultsChanged: \"onResultsChanged\",\r\n    onSelectToggled: \"onSelectToggled\",\r\n    onFilterChanged: \"onFilterChanged\",\r\n    onSortToggled: \"onSortToggled\",\r\n    onDropdownToggled: \"onDropdownToggled\",\r\n    onFilterValueChanged: \"onFilterValueChanged\"\r\n}\r\n\r\nexport default eventTypes;","var filters = [];\r\n\r\nvar fullMatchFilter = {\r\n    label: \"**\",\r\n    filterFunction: function(filterValue, record) {   \r\n        return record.data === filterValue;\r\n    }\r\n}\r\n\r\nfilters.push(fullMatchFilter);\r\n\r\nvar partialMatchFilter = {\r\n    label: \"*_\",\r\n    filterFunction: function(filterValue, record) {\r\n        return record.data.includes(filterValue);\r\n    }\r\n}\r\n\r\nfilters.push(partialMatchFilter);\r\n\r\nvar startWithFilter = {\r\n    label: '\"\"',\r\n    filterFunction: function(filterValue, record)\r\n    {\r\n        return record.data.startsWith(filterValue);\r\n    }\r\n}\r\n\r\nfilters.push(startWithFilter);\r\n\r\n\r\nclass FilterHelper\r\n{\r\n    constructor()\r\n    {\r\n        this.initializeFilters();\r\n    }\r\n\r\n    initializeFilters()\r\n    {\r\n        this.filters = filters.map((f, index) => {\r\n            var filter = {...f};\r\n            filter.index = index\r\n\r\n            return filter;\r\n        })\r\n    }\r\n\r\n    getFilters()\r\n    {\r\n        return this.filters;\r\n    }\r\n}\r\n\r\nvar filterHelper = new FilterHelper();\r\n\r\nexport default filterHelper;","import EventEmitter from 'events';\r\nimport actionTypes from '../Actions/ActionTypes'\r\nimport dispatcher from '../Dispatcher/Dispatcher'\r\nimport mockData from '../mockes'\r\nimport eventTypes from '../Events/EventTypes'\r\nimport filterHelper from '../filterHelper'\r\n\r\nclass FiltersDataStore extends EventEmitter\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this.tables = [];\r\n        this.columns = [];\r\n        this.tablesState = [];\r\n        this.allRecords = [];\r\n        this.sortedRecords = [];\r\n        this.filterResults = [];\r\n\r\n        this.isSortOn = false;\r\n        this.isTablesDropdownOpened = false;\r\n        this.isColumnsDropdownOpened = false;\r\n\r\n        this.filterValue = \"\";\r\n\r\n        this.applyFilter = this.applyFilter.bind(this);\r\n\r\n        this.filters = filterHelper.getFilters().map(f => {\r\n            var filter = {...f};\r\n            filter.active = false;\r\n\r\n            return filter;\r\n        })\r\n\r\n        this.isTablesDropdownOpened = false;\r\n\r\n        this.activeFilter = this.filters[0];\r\n        this.activeFilter.active = true;\r\n    }\r\n\r\n    isDropdownOpened(name)\r\n    {\r\n        if (name === \"CONTEXTS\")\r\n        {\r\n            return this.isTablesDropdownOpened;\r\n        }\r\n        else if (name === \"DIMENSIONS\")\r\n        {\r\n            return this.isColumnsDropdownOpened;\r\n        }\r\n    }\r\n\r\n    toggleDropdown(name)\r\n    {\r\n        if (name === \"CONTEXTS\")\r\n        {\r\n            this.isTablesDropdownOpened = !this.isTablesDropdownOpened;\r\n        }\r\n        else if (name === \"DIMENSIONS\")\r\n        {\r\n            this.isColumnsDropdownOpened = !this.isColumnsDropdownOpened;\r\n        }\r\n\r\n        this.emit(eventTypes.onDropdownToggled);\r\n    }\r\n\r\n    getColumns()\r\n    {\r\n        return this.columns;\r\n    }\r\n\r\n    getFilters()\r\n    {\r\n        return this.filters;\r\n    }\r\n\r\n    getTables()\r\n    {\r\n        return this.tablesState;\r\n    }\r\n\r\n    getFilterResults()\r\n    {\r\n        return this.filterResults;\r\n    }\r\n\r\n    addTables(tablesToAdd)\r\n    {\r\n        var self = this;\r\n\r\n        if (tablesToAdd && tablesToAdd instanceof Array)\r\n        {\r\n            tablesToAdd.forEach(function(table){\r\n        \r\n                if (table && table.tableName)\r\n                {\r\n                    self.tablesState.push({\r\n                        tableName: table.tableName,\r\n                        checked: false\r\n                    });\r\n\r\n                    //push all data related to the table\r\n                    self.tables.push(table);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.emit(eventTypes.onTablesChanged);\r\n    }\r\n\r\n    //when table checked to true\r\n    addColumns(tableName, columns)\r\n    {\r\n        var self = this;\r\n\r\n        columns.forEach(function (col) {\r\n            if (col.columnName)\r\n            {\r\n                self.columns.push({\r\n                    tableName,\r\n                    columnName: col.columnName,\r\n                    checked: false\r\n                })\r\n            }\r\n        })\r\n\r\n        this.emit(eventTypes.onColumnsChanged);\r\n    }\r\n\r\n    //when table checked to false\r\n    removeColumns(tableName)\r\n    {\r\n        this.columns = this.columns.filter((col) => col.tableName !== tableName);\r\n\r\n        var tableToExclude = this.tables.find(t => t.tableName === tableName);\r\n\r\n        tableToExclude.data.forEach(col => {\r\n                this.removeRecords(tableName, col.columnName)\r\n            })\r\n\r\n        this.emit(eventTypes.onColumnsChanged);\r\n    }\r\n\r\n    toggleFilter(index)\r\n    {\r\n        this.isSelectOpened = !this.isSelectOpened;\r\n\r\n        this.activeFilter.active = false;\r\n        this.activeFilter = this.filters[index];\r\n        this.activeFilter.active = true;\r\n\r\n        this.updateFilterResults();\r\n\r\n        this.emit(eventTypes.onFilterChanged);\r\n        this.emit(eventTypes.onSelectToggled);\r\n    }\r\n\r\n    toggleSelect()\r\n    {\r\n        this.isSelectOpened = !this.isSelectOpened;\r\n\r\n        this.emit(eventTypes.onSelectToggled);\r\n    }\r\n\r\n    toggleColumn(tableName, columnName)\r\n    {\r\n        var column = this.columns.find( col => \r\n            (col.tableName === tableName && col.columnName === columnName));\r\n\r\n        if (!column)\r\n        {\r\n            return;\r\n        }\r\n\r\n        column.checked = !column.checked;\r\n\r\n        if (column.checked)\r\n        {\r\n            this.addRecords(tableName, columnName);\r\n        }\r\n        else\r\n        {\r\n            this.removeRecords(tableName, columnName)\r\n        }\r\n\r\n        this.emit(eventTypes.onColumnsChanged);\r\n    }\r\n\r\n    addRecords(tableName, columnName)\r\n    {\r\n        var records = this.tables\r\n            .find(t => (t.tableName === tableName))\r\n            .data\r\n            .find(c => (c.columnName === columnName))\r\n            .data;\r\n\r\n        if (!records && !records instanceof Array)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var recordsToAdd = records.map(rec => ({\r\n            tableName,\r\n            columnName,\r\n            data: rec,\r\n            checked: false\r\n        }));\r\n\r\n        recordsToAdd.forEach((rec) => this.allRecords.push(rec));\r\n\r\n        this.updateSortedRecords();\r\n\r\n        this.updateFilterResults();\r\n    }\r\n\r\n    updateSortedRecords()\r\n    {\r\n        this.sortedRecords = this.allRecords.slice().sort(this.compareFunction);\r\n    }\r\n\r\n    removeRecords(tableName, columnName)\r\n    {\r\n        this.allRecords = this.allRecords.filter(rec => \r\n            !(rec.tableName === tableName && rec.columnName === columnName));\r\n\r\n        this.updateSortedRecords();\r\n        this.updateFilterResults();\r\n    }\r\n\r\n    updateFilterResults()\r\n    {\r\n        var filterResults = this.isSortOn ? this.sortedRecords : this.allRecords;\r\n\r\n        if (this.filterValue !== \"\")\r\n        {\r\n            filterResults = filterResults.filter(this.applyFilter);\r\n        }\r\n\r\n        this.filterResults = filterResults;\r\n\r\n        this.emit(eventTypes.onResultsChanged);\r\n    }\r\n\r\n    applyFilter(value)\r\n    {\r\n        return this.activeFilter.filterFunction(this.filterValue, value);\r\n    }\r\n\r\n    compareFunction(first, second)\r\n    {\r\n        if (first.data > second.data)\r\n        {\r\n            return 1;\r\n        }\r\n\r\n        if (first.data < second.data)\r\n        {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    toggleTable(tableName)\r\n    {\r\n        var table = this.tables.find((t) => (t.tableName === tableName));\r\n\r\n        var tableState = this.tablesState.find(t => (t.tableName === tableName));\r\n\r\n        tableState.checked = !tableState.checked;\r\n        \r\n        if (table)\r\n        {\r\n            if (tableState.checked === true)\r\n            {\r\n                this.addColumns(tableName, table.data);\r\n            }\r\n            else\r\n            {\r\n                this.removeColumns(table.tableName)\r\n            }\r\n        }\r\n\r\n        this.emit(eventTypes.onTablesChanged);\r\n    }\r\n\r\n    toggleRecord(index)\r\n    {\r\n        var element = this.filterResults.find(r => r.index === index);\r\n\r\n        element.checked = !element.checked;\r\n    }\r\n\r\n    setFilterValue(value)\r\n    {\r\n        this.filterValue = value;\r\n\r\n        this.updateFilterResults();\r\n\r\n        this.emit(eventTypes.onFilterValueChanged);\r\n    }\r\n\r\n    toggleSort()\r\n    {\r\n        this.isSortOn = !this.isSortOn;\r\n\r\n        this.emit(eventTypes.onSortToggled);\r\n\r\n        this.updateFilterResults();\r\n    }\r\n\r\n    reduce(action)\r\n    {\r\n        switch(action.type)\r\n        {\r\n            case actionTypes.toggleRecord : {\r\n                this.toggleRecord(action.index);\r\n                break;\r\n            };\r\n            \r\n            case actionTypes.toggleTable : {\r\n                this.toggleTable(action.tableName);\r\n                break;\r\n            }\r\n\r\n            case actionTypes.toggleColumn : {\r\n                this.toggleColumn(action.tableName, action.columnName);\r\n                break;\r\n            };\r\n\r\n            case actionTypes.setFilterValue : {\r\n                this.setFilterValue(action.value);\r\n                break;\r\n            };\r\n\r\n            case actionTypes.toggleSelect : {\r\n                this.toggleSelect();\r\n                break;\r\n            };\r\n\r\n            case actionTypes.toggleFilter : {\r\n                this.toggleFilter(action.index);\r\n                break;\r\n            };\r\n\r\n            case actionTypes.toggleSort : {\r\n                this.toggleSort();\r\n                break;\r\n            };\r\n\r\n            case actionTypes.toggleDropdown : {\r\n                this.toggleDropdown(action.name);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst filterDataStore =  new FiltersDataStore();\r\n\r\ndispatcher.register(filterDataStore.reduce.bind(filterDataStore));\r\n\r\nfilterDataStore.addTables(mockData);\r\n\r\nwindow.filterDataStore = filterDataStore;\r\n\r\nexport default filterDataStore;","import React, { Component } from 'react';\r\n\r\nclass Checkbox extends Component {\r\n    render() {\r\n        return (\r\n            <input type=\"checkbox\"\r\n                    checked = {this.props.checked}\r\n                    onChange = {this.props.onChange}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Checkbox;\r\n","import React, { Component } from 'react'\r\nimport Checkbox from './Checkbox';\r\n\r\nexport default class ContentElement extends Component {\r\n\r\n    handleBubbleEvent(target)\r\n    {\r\n        if (target.localName === \"input\")\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.props.onChange();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-element-container\" onClick = {(e) => this.handleBubbleEvent(e.target)}>\r\n                <Checkbox checked = {this.props.checked} onChange = {this.props.onChange}/>\r\n                <span className = \"content-element\">{this.props.text}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import dispatcher from '../Dispatcher/Dispatcher';\r\nimport actionTypes from './ActionTypes'\r\n\r\nexport function includeColumn(tableId, columnId)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.includeColumn,\r\n        tableId,\r\n        columnId\r\n    })\r\n}\r\n\r\nexport function toggleTable(tableName)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleTable,\r\n        tableName\r\n    })\r\n}\r\n\r\nexport function toggleColumn(tableName, columnName)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleColumn,\r\n        tableName,\r\n        columnName\r\n    })\r\n}\r\n\r\nexport function addTable(table)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.addTable,\r\n        table\r\n    })\r\n}\r\n\r\nexport function setFilterResults(results)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.setFilterResults,\r\n        results\r\n    })\r\n}\r\n\r\nexport function toggleSort()\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleSort\r\n    })\r\n}\r\n\r\nexport function toggleRecord(index)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleRecord,\r\n        index\r\n    })\r\n}\r\n\r\nexport function setFilterValue(value)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.setFilterValue,\r\n        value\r\n    })\r\n}\r\n\r\nexport function toggleFilter(index)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleFilter,\r\n        index\r\n    })\r\n}\r\n\r\nexport function toggleSelect()\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleSelect\r\n    })\r\n}\r\n\r\nexport function toggleDropdown(name)\r\n{\r\n    dispatcher.dispatch({\r\n        type: actionTypes.toggleDropdown,\r\n        name\r\n    })\r\n}","import React, { Component } from 'react';\r\n\r\nclass DropdownArrow extends Component {\r\n    render() {\r\n        var iconClassName = this.props.isContentVisible ? \"fa-angle-up\" : \"fa-angle-down\";\r\n        \r\n        return (\r\n            <i className = {`fa ${iconClassName} dropdown-arrow`} onClick={this.props.toogle}></i>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropdownArrow;\r\n","import React, { Component } from 'react'\r\nimport DropdownArrow from './DropdownArrow';\r\n\r\nexport default class DropdownHeader extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropdown-header\" onClick = {this.props.toggle}>\r\n                    <DropdownArrow isContentVisible = {this.props.isContentVisible}/>\r\n                    <span className=\"header-label\">{this.props.name}</span>\r\n                    <span className=\"selectedValues\">{this.props.data}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport DropdownHeader from './DropdownHeader';\r\nimport filterDataStore from './Stores/FiltersDataStore';\r\nimport eventTypes from './Events/EventTypes';\r\nimport {toggleDropdown} from './Actions/Actions'\r\n\r\nclass Dropdown extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = { \r\n            isDropdownOpened: filterDataStore.isDropdownOpened(this.props.name)\r\n        };\r\n\r\n        this.toggleContent = this.toggleContent.bind(this);\r\n        this.handleDropdownToggled = this.handleDropdownToggled.bind(this);\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        filterDataStore.on(eventTypes.onDropdownToggled, this.handleDropdownToggled);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        filterDataStore.removeListener(eventTypes.onDropdownToggled, this.handleDropdownToggled);\r\n    }\r\n\r\n    toggleContent()\r\n    {\r\n        toggleDropdown(this.props.name);\r\n    }\r\n\r\n    handleDropdownToggled()\r\n    {\r\n        var currentState = filterDataStore.isDropdownOpened(this.props.name);\r\n\r\n        if (currentState !== this.state.isDropdownOpened)\r\n        {\r\n            this.setState({\r\n                isDropdownOpened: currentState\r\n            })\r\n        }\r\n    }\r\n\r\n    reducer(previous, current, index)\r\n    {\r\n        if (index === 0)\r\n        {\r\n            return current;\r\n        }\r\n        \r\n        return `${previous}, ${current}`;\r\n    }\r\n\r\n    render() {\r\n\r\n        var headerData = this.props.selectedValues.reduce(this.reducer, \"\");\r\n\r\n        return (\r\n            <div>\r\n                <DropdownHeader\r\n                    toggle = {this.toggleContent} \r\n                    name = {this.props.name}\r\n                    data = {headerData}\r\n                    isContentVisible = {this.state.isDropdownOpened}\r\n                />\r\n                {this.state.isDropdownOpened && this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from 'react';\r\nimport DropdownContent from './DropdownContent'\r\nimport filterDataStore from './Stores/FiltersDataStore'\r\nimport ContentElement from './ContentElement'\r\nimport * as actions from './Actions/Actions'\r\nimport eventTypes from './Events/EventTypes'\r\nimport Dropdown from './Dropdown';\r\n\r\nclass TablesDropdown extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = { \r\n            tablesState: filterDataStore.getTables(),\r\n            selectedTables: filterDataStore.getTables().filter(t => t.checked).map(t => t.tableName)\r\n        };\r\n\r\n        this.handleTablesChanged = this.handleTablesChanged.bind(this);\r\n    }\r\n\r\n    handleTablesChanged()\r\n    {\r\n        this.setState({\r\n            tablesState: filterDataStore.getTables(),\r\n            selectedTables: filterDataStore.getTables().filter(t => t.checked).map(t => t.tableName)\r\n        })\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        filterDataStore.on(eventTypes.onTablesChanged, this.handleTablesChanged);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        filterDataStore.removeListener(eventTypes.onTablesChanged, this.handleTablesChanged);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Dropdown selectedValues = {this.state.selectedTables} name = \"CONTEXTS\">\r\n                <DropdownContent>\r\n                    {this.state.tablesState.map((value, index) => <ContentElement                 \r\n                                key = {index}\r\n                                text = {value.tableName}\r\n                                checked = {value.checked}\r\n                                onChange = {() => actions.toggleTable(value.tableName)}/>)}\r\n                </DropdownContent>\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TablesDropdown;\r\n","import React, { Component } from 'react';\r\nimport filterDataStore from './Stores/FiltersDataStore'\r\nimport DropdownContent from './DropdownContent'\r\nimport ContentElement from './ContentElement'\r\nimport * as actions from './Actions/Actions'\r\nimport eventTypes from './Events/EventTypes'\r\nimport Dropdown from './Dropdown';\r\n\r\nclass ColumnsDropdown extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = { \r\n            columnsState: filterDataStore.getColumns(),\r\n            selectedColumns: filterDataStore.getColumns().filter(c => c.checked).map(c => c.columnName),\r\n        }\r\n\r\n        this.handleColumnsChanged = this.handleColumnsChanged.bind(this);\r\n    }\r\n\r\n    handleColumnsChanged()\r\n    {\r\n        this.setState({\r\n            columnsState: filterDataStore.getColumns(),\r\n            selectedColumns: filterDataStore.getColumns().filter(c => c.checked).map(c => c.columnName)\r\n        })\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        filterDataStore.on(eventTypes.onColumnsChanged, this.handleColumnsChanged);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        filterDataStore.removeListener(eventTypes.onColumnsChanged, this.handleColumnsChanged);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dropdown name = \"DIMENSIONS\" selectedValues = {this.state.selectedColumns}>\r\n                <DropdownContent>\r\n                    {this.state.columnsState.map((value, index) => <ContentElement                 \r\n                                key = {index}\r\n                                text = {value.columnName}\r\n                                checked = {value.checked}\r\n                                onChange = {() => actions.toggleColumn(value.tableName, value.columnName)}/>)}\r\n                </DropdownContent>\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColumnsDropdown;\r\n","import React, { Component } from 'react'\r\nimport TablesDropdown from './TablesDropdown';\r\nimport ColumnsDropdown from './ColumnsDropdown';\r\n\r\nexport default class DropdownsContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropdowns-container\">\r\n                <TablesDropdown/>\r\n                <ColumnsDropdown/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport debounce from 'lodash.debounce';\r\nimport {setFilterValue} from './Actions/Actions'\r\nimport filterDataStore from './Stores/FiltersDataStore';\r\nimport eventTypes from './Events/EventTypes';\r\n\r\nclass SearchComponent extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {filterValue: filterDataStore.filterValue}\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        this.debouncedHandleChange = debounce(setFilterValue, 100);\r\n        this.filterValue = filterDataStore.filterValue;\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        this.debouncedHandleChange.cancel();\r\n    }\r\n\r\n    handleChange(value)\r\n    {\r\n        this.setState({\r\n            filterValue: value\r\n        });\r\n\r\n        this.debouncedHandleChange(value);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"searchWrapper\">\r\n                <i className=\"fa fa-search\"/>\r\n                <input type = \"text\" \r\n                    maxLength = \"40\" \r\n                    placeholder = \"Find\"\r\n                    value = {this.state.filterValue} \r\n                    onChange = {(e) => this.handleChange(e.target.value)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchComponent;\r\n","import React, { Component } from 'react';\r\n\r\nclass FilterElement extends Component {\r\n    render() {\r\n        return (\r\n            <p className=\"filter-element text-wrapper\"\r\n                style={{\"backgroundColor\" : this.props.active ? \"#575554\" : \"#383737\"}}\r\n                onClick={this.props.onClick}>{this.props.label}</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterElement;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass FilterElementsWrapper extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"filter-elements-wrapper\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterElementsWrapper;\r\n","import React, { Component } from 'react';\r\nimport FilterElement from './FilterElement';\r\nimport * as actions from './Actions/Actions'\r\nimport FilterElementsWrapper from './FilterElementsWrapper';\r\nimport filterDataStore from './Stores/FiltersDataStore';\r\nimport eventTypes from './Events/EventTypes';\r\n\r\nclass FilterElementsContainer extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filters: filterDataStore.getFilters(),\r\n            activeFilter: filterDataStore.activeFilter,\r\n            isSelectOpened: filterDataStore.isSelectOpened,\r\n            isSortOn: filterDataStore.isSortOn\r\n        }\r\n\r\n        this.onSelectOpened = this.onSelectOpened.bind(this);\r\n        this.toggleSort = this.toggleSort.bind(this);\r\n\r\n        this.handleSelectToggled = this.handleSelectToggled.bind(this);\r\n        this.handleFilterChanged = this.handleFilterChanged.bind(this);\r\n        this.handleSortToggled = this.handleSortToggled.bind(this);\r\n    }\r\n\r\n    toggleSort()\r\n    {\r\n        actions.toggleSort();\r\n    }\r\n\r\n    handleSortToggled()\r\n    {\r\n        this.setState({\r\n            isSortOn: filterDataStore.isSortOn\r\n        })\r\n    }\r\n\r\n    onFilterSelected(index)\r\n    {\r\n        if (this.state.activeFilter.index === index)\r\n        {\r\n            actions.toggleSelect();\r\n        }\r\n        else\r\n        {\r\n            actions.toggleFilter(index);\r\n        }\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        filterDataStore.on(eventTypes.onSelectToggled, this.handleSelectToggled);\r\n        filterDataStore.on(eventTypes.onFilterChanged, this.handleFilterChanged);\r\n        filterDataStore.on(eventTypes.onSortToggled, this.handleSortToggled);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        filterDataStore.removeListener(eventTypes.onSelectToggled, this.handleSelectToggled);\r\n        filterDataStore.removeListener(eventTypes.onFilterChanged, this.handleFilterChanged);\r\n        filterDataStore.removeListener(eventTypes.onSortToggled, this.handleSortToggled);\r\n    }\r\n\r\n    handleSelectToggled()\r\n    { \r\n        this.setState({\r\n            isSelectOpened: filterDataStore.isSelectOpened\r\n        })\r\n    }\r\n\r\n    handleFilterChanged()\r\n    {\r\n        this.setState({\r\n            activeFilter: filterDataStore.activeFilter\r\n        })\r\n    }\r\n\r\n    onSelectOpened()\r\n    {\r\n        actions.toggleSelect();\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (         \r\n            <div className=\"filter-elements-container-after\">\r\n                <div className=\"filter-elements-container\">\r\n                    <FilterElementsWrapper>\r\n                        {this.state.isSelectOpened && filterDataStore.getFilters().map((value, index) =>\r\n                            <FilterElement\r\n                                label = {value.label}\r\n                                key = {index}\r\n                                index = {value.index}\r\n                                onClick = {() => this.onFilterSelected(value.index)}\r\n                                active = {value.active}/>\r\n                        )}\r\n\r\n                        {!this.state.isSelectOpened && <FilterElement\r\n                                                            label = {this.state.activeFilter.label}\r\n                                                            index = {this.state.activeFilter.label}\r\n                                                            onClick = {this.onSelectOpened}\r\n                                                            active = {true}\r\n                                                            />}\r\n                    </FilterElementsWrapper>\r\n\r\n                    <FilterElementsWrapper>\r\n                        <FilterElement  \r\n                            label=\"A-Z\"\r\n                            active = {this.state.isSortOn}\r\n                            onClick = {this.toggleSort}/>\r\n                    </FilterElementsWrapper>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterElementsContainer;\r\n","import React, { Component } from 'react';\r\nimport ContentElement from './ContentElement';\r\nimport filterDataStore from './Stores/FiltersDataStore'\r\nimport * as actions from './Actions/Actions'\r\nimport eventTypes from './Events/EventTypes';\r\n\r\nclass FilterResult extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {results: filterDataStore.getFilterResults()}\r\n\r\n        this.onRecordClicked = this.onRecordClicked.bind(this);\r\n        this.handleResultsChanged = this.handleResultsChanged.bind(this);\r\n    }\r\n\r\n    handleResultsChanged()\r\n    {\r\n        this.setState({\r\n            results: filterDataStore.getFilterResults()\r\n        });\r\n    }\r\n\r\n    componentWillMount()\r\n    {\r\n        filterDataStore.on(eventTypes.onResultsChanged, this.handleResultsChanged);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        filterDataStore.removeListener(eventTypes.onResultsChanged, this.handleResultsChanged);\r\n    }\r\n\r\n    onRecordClicked(index)\r\n    {\r\n        actions.toggleRecord(index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"filter-result-container scrollable\">\r\n                {this.state.results.map((rec, index) => <ContentElement text={rec.data} \r\n                    checked={rec.checked}\r\n                    onChange = {() => console.log(\"change\")}\r\n                    key={index} \r\n                    index={rec.index}/>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterResult;\r\n","import React, { Component } from 'react';\r\nimport SearchComponent from './SearchComponent';\r\nimport FilterElementsContainer from './FilterElementsContainer';\r\nimport FilterResultComponent from './FilterResult';\r\n\r\n\r\n\r\nclass FilterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"filter-component\">\r\n                <SearchComponent/>\r\n                <FilterElementsContainer/>\r\n                <FilterResultComponent/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterComponent;\r\n","import React, { Component } from 'react';\r\nimport DropdownsContainer from './DropdownsContainer';\r\nimport FilterComponent from './FilterComponent';\r\n\r\nclass FiltersWidgetContentContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"widget-content-container\">\r\n                <DropdownsContainer/>\r\n                <FilterComponent/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FiltersWidgetContentContainer;\r\n","import React, { Component } from 'react'\r\nimport FiltersWidgetHeader from './FiltersWidgetHeader';\r\nimport FiltersWidgetContentContainer from './FiltersWidgetContentContainer';\r\n\r\nexport default class FiltersWidget extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {isContentVisible : false, left: 30, top: 40};\r\n        this.toogleContent = this.toggleContent.bind(this);\r\n        this.shift = this.shift.bind(this);\r\n    }\r\n\r\n    shift(shiftX, shiftY)\r\n    {\r\n        this.setState((prev) => ({top: prev.top + shiftY, left: prev.left + shiftX}));\r\n    }\r\n    \r\n\r\n    toggleContent()\r\n    {\r\n        this.setState((prev) => ({isContentVisible : !prev.isContentVisible}));\r\n    }\r\n\r\n    render() {\r\n\r\n        var content = <FiltersWidgetContentContainer isContentVisible={this.state.isContentVisible}/>;\r\n\r\n        return (\r\n            <div className=\"filtersWidget\" style={{left: this.state.left, top: this.state.top}}>\r\n                <FiltersWidgetHeader toogleContent={this.toogleContent} shift={this.shift} isContentVisible={this.state.isContentVisible}/>\r\n                {this.state.isContentVisible && content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport FiltersWidget from './FiltersWidget';\r\n\r\nfunction App() {\r\n  return (\r\n    <FiltersWidget/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}